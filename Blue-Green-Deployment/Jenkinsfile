pipeline {
  agent none  // We'll define agent per stage

  environment {
    DOCKER_IMAGE = 'tameemdevops/blue-green'       // Your DockerHub image
    DOCKER_TAG = 'Blue'                            // Change to 'Green' if needed
    FULL_IMAGE = "${DOCKER_IMAGE}:${DOCKER_TAG}"
    DEPLOYMENT_NAME = 'bankapp-blue'               // Your K8s deployment name
    NAMESPACE = 'default'
    MICROK8S_HOST = '137.184.65.39'
    REMOTE_DIR = '/root/k8s'
  }

  stages {
    stage('Checkout Code') {
      agent { label 'slave' }
      steps {
        git url: 'https://github.com/TameemZahid/Blue-Green_Deployment.git', branch: 'main'
      }
    }

    stage('Build JAR with Maven') {
      agent { label 'slave' }  // Ensure Maven is installed here
      steps {
        sh '''
        echo "üì¶ Building Spring Boot JAR"
        cd Blue-Green-Deployment
        ./mvnw clean package -DskipTests || mvn clean package -DskipTests
        '''
      }
    }

    stage('Build Docker Image') {
      agent { label 'slave' }  // Ensure Docker is installed here
      steps {
        sh '''
        echo "üê≥ Building Docker Image"
        cd Blue-Green-Deployment
        docker build -t $FULL_IMAGE .
        '''
      }
    }

    stage('Push Docker Image') {
      agent { label 'slave' }
      steps {
        withCredentials([usernamePassword(
          credentialsId: 'dev_cred',  // üëà Replace with your actual Jenkins DockerHub creds ID
          usernameVariable: 'DOCKER_USER',
          passwordVariable: 'DOCKER_PASS'
        )]) {
          sh '''
          echo "üîê Logging into Docker Hub..."
          echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin

          echo "üì§ Pushing image to Docker Hub"
          docker push $FULL_IMAGE
          '''
        }
      }
    }

    stage('Deploy to MicroK8s') {
      agent { label 'slave' }
      steps {
        sshagent(['microk8']) {  // üëà Jenkins credential ID for your SSH key
          sh '''
          echo "üöÄ Deploying to MicroK8s"

          # Ensure remote directory exists
          ssh -o StrictHostKeyChecking=no root@$MICROK8S_HOST "mkdir -p $REMOTE_DIR"

          # Copy Kubernetes manifests
          scp Blue-Green-Deployment/k8s/*.yml root@$MICROK8S_HOST:$REMOTE_DIR/

          # Update image in the YAML and apply
          ssh -o StrictHostKeyChecking=no root@$MICROK8S_HOST "
            sed -i 's|image:.*|image: $FULL_IMAGE|' $REMOTE_DIR/app-deployment-blue.yml &&
            microk8s.kubectl apply -f $REMOTE_DIR &&
            microk8s.kubectl rollout status deployment/$DEPLOYMENT_NAME -n $NAMESPACE
          "
          '''
        }
      }
    }
  }

  post {
    success {
      echo "‚úÖ Deployed $FULL_IMAGE successfully"
    }
    failure {
      echo "‚ùå Deployment failed"
    }
  }
}
