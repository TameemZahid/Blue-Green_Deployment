pipeline {
  agent none  // üëà Top-level agent is "none" because we're setting it per stage

  environment {
    DOCKER_IMAGE = 'tameemdevops/blue-green'
    DOCKER_TAG = "Blue"
    FULL_IMAGE = "${DOCKER_IMAGE}:${DOCKER_TAG}"
    DEPLOYMENT_NAME = 'bankapp-blue'
    CONTAINER_NAME = 'bankapp'
    NAMESPACE = 'default'
    MICROK8S_HOST = '137.184.65.39'
    REMOTE_DIR = '/root/bluegreenapp'
  }

  stages {

    stage('Checkout Code') {
      agent { label 'slave' }
      steps {
        git url: 'https://github.com/TameemZahid/Blue-Green_Deployment.git', branch: 'main'
      }
    }

    stage('Build JAR with Maven') {
      agent {
        docker {
          image 'maven:3.8.6-openjdk-17'
          args '-v /root/.m2:/root/.m2'
        }
      }
      steps {
        sh '''
        echo "üì¶ Packaging Spring Boot app using Maven in container"
        cd Blue-Green-Deployment
        mvn clean package -DskipTests
        '''
      }
    }

    stage('Build Docker Image') {
      agent { label 'slave' }
      steps {
        sh '''
        echo "üõ†Ô∏è Building Docker image: $FULL_IMAGE"
        cd Blue-Green-Deployment
        docker build -t $FULL_IMAGE .
        '''
      }
    }

    stage('Push to Docker Hub') {
      agent { label 'slave' }
      steps {
        withCredentials([usernamePassword(
          credentialsId: 'dev_cred',
          usernameVariable: 'DOCKER_USER',
          passwordVariable: 'DOCKER_PASS'
        )]) {
          sh '''
          echo "üîê Logging into Docker Hub..."
          echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
          echo "üì¶ Pushing Docker image to Docker Hub: $FULL_IMAGE"
          docker push $FULL_IMAGE
          '''
        }
      }
    }

    stage('Deploy to MicroK8s') {
      agent { label 'slave' }
      steps {
        sshagent(['microk8']) {
          sh '''
          echo "üöÄ Deploying to MicroK8s..."

          # Prepare remote dir
          ssh -o StrictHostKeyChecking=no root@$MICROK8S_HOST "mkdir -p $REMOTE_DIR"

          # Copy YAML to remote host
          scp Blue-Green-Deployment/k8s/app-deployment-blue.yml root@$MICROK8S_HOST:$REMOTE_DIR/deployment.yaml

          # Apply to MicroK8s
          ssh -o StrictHostKeyChecking=no root@$MICROK8S_HOST "
            sed -i 's|image:.*|image: $FULL_IMAGE|' $REMOTE_DIR/deployment.yaml &&
            microk8s.kubectl apply -f $REMOTE_DIR/deployment.yaml &&
            microk8s.kubectl rollout status deployment/$DEPLOYMENT_NAME -n $NAMESPACE
          "
          '''
        }
      }
    }
  }

  post {
    success {
      echo "‚úÖ Successfully deployed: $FULL_IMAGE"
    }
    failure {
      echo "‚ùå Deployment failed."
    }
  }
}
